plugins {
    alias(libs.plugins.androidLibrary)
    alias(libs.plugins.jetbrainsKotlinAndroid)
    alias(libs.plugins.rustCargoNdk)
}

android {
    namespace 'alt.nainapps.sharepase.rsnative'
    compileSdk 34

    defaultConfig {
        minSdk 26

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    // Essential! Note that UniFFI dictates the minimum supported version, and this may change with new releases
    // Note. I couldn't get this to work with libs catalog. This needs to be here.
    implementation "net.java.dev.jna:jna:5.15.0@aar"
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}

cargoNdk {
    module  = "../rust"  // Directory containing Cargo.toml
    librariesNames = ["libfoobar.so", "libpbcli.so"]
    targets = ["arm64", "arm"]
    verbose = true

}

android.libraryVariants.all { variant ->

    cargoNdk.librariesNames.each { libraryName ->
        // Define a task name based on the variant name and the library name
        def taskName = "generate${variant.name.capitalize()}UniFFIBindingsFor${libraryName.capitalize()}"
        // Register the task
        def generateBindings = tasks.register(taskName, Exec) {
            // Path relative to this module ~ relative to this gradle file.
            workingDir project.file('../../rust')
            // Note: Adjust the library path based on the library name
            // Here we assume arm64-v8a is always a target
            commandLine 'cargo', 'run', '-p', 'uniffi-bindgen', 'generate',
                    '--library', project.file("./src/main/jniLibs/arm64-v8a/${libraryName}"),
                    '--language', 'kotlin',
                    '--out-dir', project.file("${buildDir}/generated/source/uniffi/${variant.name}/java")

            dependsOn "buildCargoNdk${variant.name.capitalize()}"

            // Specify inputs for task. Should help avoid regenerating bindings if nothing changed.
            inputs.dir(project.file("./src/main/jniLibs/arm64-v8a/"))
        }

        variant.javaCompileProvider.get().dependsOn(generateBindings)
        tasks.named("compile${variant.name.capitalize()}Kotlin").configure {dependsOn generateBindings}
        tasks.named("connectedDebugAndroidTest").configure {dependsOn generateBindings}
    }
    def sourceSet = variant.sourceSets.find { it.name == variant.name }

    sourceSet.kotlin.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")
    sourceSet.java.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")
//    sourceSet.kotlin.srcDir 'src/main/java'
//    sourceSet.java.srcDir 'src/main/java'
}